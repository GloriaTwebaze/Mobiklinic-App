{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport Icon from \"@expo/vector-icons/Feather\";\nimport IconFont from \"@expo/vector-icons/FontAwesome\";\nimport { COLORS, DIMENS } from \"../constants/styles\";\nimport { colors, ListItem } from \"react-native-elements\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nexport var MESSAGES = [{\n  threadID: \"some-id-01-3443\",\n  date: \"date-started\",\n  to: {\n    name: \"David\",\n    id: \"userID\"\n  },\n  thread: [{\n    id: \"msgid001\",\n    msg: \"Blurbs\",\n    date: \"Aug 25, 2021\",\n    time: \"10:13\",\n    from: \"you\"\n  }, {\n    id: \"msgid002\",\n    msg: \"Blurbs\",\n    date: \"Aug 25, 2021\",\n    time: \"10:15\",\n    from: \"David\"\n  }, {\n    id: \"msgid003\",\n    msg: \"Blurbs\",\n    date: \"Aug 25, 2021\",\n    time: \"10:20\",\n    from: \"you\"\n  }]\n}, {\n  threadID: \"some-id-01-3444\",\n  date: \"date-started\",\n  to: {\n    name: \"Aaron\",\n    id: \"userID\"\n  },\n  thread: [{\n    id: \"msgid001\",\n    msg: \"Blurbs\",\n    date: \"Aug 25, 2021\",\n    time: \"10:20\",\n    from: \"you\"\n  }, {\n    id: \"msgid002\",\n    msg: \"Blurbs\",\n    date: \"Aug 25, 2021\",\n    time: \"10:56\",\n    from: \"Aaron\"\n  }, {\n    id: \"msgid003\",\n    msg: \"Blurbs\",\n    date: \"Aug 25, 2021\",\n    time: \"11:06\",\n    from: \"you\"\n  }]\n}, {\n  threadID: \"some-id-01-3445\",\n  date: \"date-started\",\n  to: {\n    name: \"Ibrahim\",\n    id: \"userID\"\n  },\n  thread: [{\n    id: \"msgid001\",\n    msg: \"Blurbs\",\n    date: \"Aug 25, 2021\",\n    time: \"09:20\",\n    from: \"you\"\n  }, {\n    id: \"msgid002\",\n    msg: \"Blurbs\",\n    date: \"Aug 25, 2021\",\n    time: \"10:20\",\n    from: \"Ibrahim\"\n  }, {\n    id: \"msgid003\",\n    msg: \"Blurbs\",\n    date: \"Aug 25, 2021\",\n    time: \"11:20\",\n    from: \"you\"\n  }]\n}];\nexport default function Chats() {\n  var _React$useState = React.useState(0),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      showChat = _React$useState2[0],\n      setShowChat = _React$useState2[1];\n\n  var _React$useState3 = React.useState([]),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      theThread = _React$useState4[0],\n      setTheThread = _React$useState4[1];\n\n  var whoseChat = function whoseChat(chat) {\n    setTheThread(chat);\n    setShowChat(1);\n  };\n\n  var _keyExtractor = function _keyExtractor(item) {\n    return item.threadID;\n  };\n\n  var _renderItem = function _renderItem(_ref) {\n    var item = _ref.item;\n    return _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return whoseChat(item);\n      },\n      children: _jsxs(ListItem, {\n        bottomDivider: true,\n        children: [_jsx(Icon, {\n          name: \"circle\",\n          color: COLORS.GREY,\n          SIZE: 25\n        }), _jsx(ListItem.Content, {\n          children: _jsx(ListItem.Title, {\n            style: STYLES.listTitle,\n            children: item.thread[item.thread.length - 1].msg\n          })\n        }), _jsx(ListItem.Chevron, {\n          size: 30\n        })]\n      })\n    });\n  };\n\n  var Chat = function Chat(_ref2) {\n    var showChat = _ref2.showChat;\n    var currentTime = new Date();\n\n    var _React$useState5 = React.useState(\"\"),\n        _React$useState6 = _slicedToArray(_React$useState5, 2),\n        msg = _React$useState6[0],\n        setMsg = _React$useState6[1];\n\n    var _React$useState7 = React.useState(false),\n        _React$useState8 = _slicedToArray(_React$useState7, 2),\n        keyboardStatus = _React$useState8[0],\n        setKeyboardStatus = _React$useState8[1];\n\n    var AMessage = function AMessage(_ref3) {\n      var thread = _ref3.thread,\n          style = _ref3.style;\n\n      var statusIcon = _jsx(Icon, {\n        name: \"clock\"\n      });\n\n      switch (thread == null ? void 0 : thread.status) {\n        case 0:\n          statusIcon = _jsx(Icon, {\n            name: \"clock\"\n          });\n          break;\n\n        case 1:\n          statusIcon = _jsx(Icon, {\n            name: \"check\"\n          });\n          break;\n\n        case 2:\n          statusIcon = _jsx(IconFont, {\n            name: \"check-double\"\n          });\n          break;\n\n        case 3:\n          statusIcon = _jsx(IconFont, {\n            name: \"check-double\"\n          });\n          break;\n\n        default:\n          statusIcon = _jsx(Icon, {\n            name: \"clock\"\n          });\n          break;\n      }\n\n      return _jsxs(View, {\n        style: style,\n        children: [_jsx(Text, {\n          children: thread.msg\n        }), _jsxs(View, {\n          children: [_jsx(Text, {\n            style: STYLES.messageTime,\n            children: thread.time\n          }), statusIcon]\n        })]\n      });\n    };\n\n    return _jsxs(_Fragment, {\n      children: [_jsxs(View, {\n        style: STYLES.messageHeader,\n        children: [_jsx(TouchableOpacity, {\n          onPress: function onPress() {\n            return showChat(0);\n          },\n          children: _jsx(Icon, {\n            name: \"arrow-left\",\n            size: 30,\n            strokeSize: 4,\n            color: COLORS.BLACK\n          })\n        }), _jsx(IconFont, {\n          name: \"user\",\n          size: 30,\n          strokeSize: 4,\n          style: STYLES.icon,\n          color: COLORS.BLACK\n        }), _jsxs(View, {\n          style: STYLES.messageHeaderInner,\n          children: [_jsx(Text, {\n            style: STYLES.messageReceiver,\n            children: theThread.to.name\n          }), _jsxs(Text, {\n            style: STYLES.lastSeen,\n            children: [\"Last seen \", currentTime.toLocaleDateString(), \" at\", \" \", currentTime.toLocaleTimeString()]\n          })]\n        })]\n      }), _jsx(ScrollView, {\n        contentContainerStyle: STYLES.contentContainerStyle,\n        style: STYLES.threadBody,\n        keyboardDismissMode: \"on-drag\",\n        children: theThread.thread.map(function (threadItem, index) {\n          return _jsx(AMessage, {\n            style: [STYLES.message, threadItem.from == \"you\" ? STYLES.you : STYLES.other],\n            thread: threadItem\n          }, threadItem.id);\n        })\n      }), _jsxs(View, {\n        style: STYLES.messageFooter,\n        children: [_jsxs(View, {\n          style: STYLES.messageInput,\n          children: [_jsx(TouchableOpacity, {\n            children: _jsx(Icon, {\n              name: \"smile\",\n              size: 30,\n              strokeSize: 5,\n              color: \"rgba(0,0,0,.5)\"\n            })\n          }), _jsx(TextInput, {\n            value: msg,\n            multiline: true,\n            numberOfLines: 3,\n            style: STYLES.messageInputControl,\n            onChangeText: function onChangeText(text) {\n              return setMsg(text);\n            },\n            placeholder: \"Type a message\",\n            onFocus: function onFocus() {\n              return setKeyboardStatus(true);\n            }\n          })]\n        }), keyboardStatus ? _jsx(TouchableOpacity, {\n          style: STYLES.messageInputBtn,\n          onPress: function _callee() {\n            var date, time, id, newThread;\n            return _regeneratorRuntime.async(function _callee$(_context) {\n              while (1) {\n                switch (_context.prev = _context.next) {\n                  case 0:\n                    setMsg(\"\");\n\n                    try {\n                      date = new Date();\n                      time = date.getHours() + \":\" + date.getMinutes();\n                      id = \"msgid\" + date.getHours() + date.getMinutes() + date.getSeconds();\n                      newThread = _objectSpread({}, theThread);\n                      newThread.thread.push({\n                        id: id,\n                        msg: msg,\n                        from: \"you\",\n                        time: time,\n                        date: date.toDateString(),\n                        status: 2\n                      });\n                      setTheThread(newThread);\n                    } catch (error) {\n                      console.log(error);\n                    }\n\n                  case 2:\n                  case \"end\":\n                    return _context.stop();\n                }\n              }\n            }, null, null, null, Promise);\n          },\n          children: _jsx(IconFont, {\n            name: \"paper-plane\",\n            size: 25,\n            strokeSize: 5,\n            color: COLORS.WHITE,\n            backgroundColor: COLORS.ACCENT_1\n          })\n        }) : _jsx(TouchableOpacity, {\n          style: STYLES.messageInputBtn,\n          children: _jsx(IconFont, {\n            name: \"microphone\",\n            size: 25,\n            strokeSize: 5,\n            color: COLORS.WHITE,\n            backgroundColor: COLORS.ACCENT_1\n          })\n        })]\n      })]\n    });\n  };\n\n  if (showChat) return _jsx(Chat, {\n    showChat: setShowChat\n  });\n  return _jsx(_Fragment, {\n    children: _jsx(FlatList, {\n      data: MESSAGES,\n      renderItem: _renderItem,\n      keyExtractor: _keyExtractor\n    })\n  });\n}\nvar STYLES = StyleSheet.create({\n  wrapper: {\n    flex: 1,\n    backgroundColor: COLORS.SECONDARY\n  },\n  header: {\n    flex: 1,\n    borderColor: COLORS.ACCENT_1\n  },\n  body: {\n    flex: 2,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  messageHeader: {\n    padding: 10,\n    flexDirection: \"row\",\n    backgroundColor: COLORS.ACCENT_1\n  },\n  messageHeaderInner: {\n    paddingLeft: 20\n  },\n  messageReceiver: {\n    fontWeight: \"bold\"\n  },\n  lastSeen: {\n    fontSize: 9\n  },\n  messageTime: {\n    textAlign: \"right\",\n    color: \"#064374\"\n  },\n  message: {\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 0.5,\n    elevation: 1,\n    marginBottom: 8,\n    borderRadius: 8,\n    padding: 10,\n    paddingBottom: 5\n  },\n  threadBody: {\n    flex: 2,\n    padding: 20\n  },\n  contentContainerStyle: {\n    paddingBottom: 40\n  },\n  messageInput: {\n    backgroundColor: COLORS.WHITE,\n    borderRadius: 50,\n    flexDirection: \"row\",\n    flex: 3,\n    alignItems: \"center\",\n    paddingLeft: 10,\n    paddingRight: 10,\n    marginRight: 10\n  },\n  messageInputEmoji: {\n    flex: 1\n  },\n  messageInputControl: {\n    flex: 2,\n    padding: 0,\n    paddingLeft: 5,\n    paddingRight: 5\n  },\n  messageInputBtn: {\n    backgroundColor: COLORS.PRIMARY,\n    width: 50,\n    height: 50,\n    borderRadius: 100,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  messageFooter: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    margin: 10\n  },\n  title: {\n    fontWeight: \"bold\",\n    color: COLORS.SECONDARY,\n    textAlign: \"center\"\n  },\n  alert: {\n    color: COLORS.GREY,\n    textAlign: \"center\",\n    marginTop: 15\n  },\n  listTitle: {\n    color: COLORS.BLACK,\n    fontSize: 16,\n    fontWeight: \"bold\"\n  },\n  subtitle: {\n    flexDirection: \"row\"\n  },\n  label: {\n    fontWeight: \"bold\",\n    marginRight: 5\n  },\n  leftHeader: {\n    flex: 1,\n    paddingLeft: 10\n  },\n  centerHeader: {\n    flex: 2,\n    flexDirection: \"row\"\n  },\n  yesText: {\n    color: COLORS.PRIMARY\n  },\n  rightHeader: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\"\n  },\n  icon: {\n    marginLeft: 10\n  },\n  you: {\n    backgroundColor: COLORS.WHITE\n  },\n  other: {\n    backgroundColor: \"#C5E3FC\"\n  }\n});","map":{"version":3,"sources":["/Users/davidofug/Documents/Apps/mobile-apps/mobiklinic/components/screens/Chats.js"],"names":["React","TextInput","Icon","IconFont","COLORS","DIMENS","colors","ListItem","AsyncStorage","MESSAGES","threadID","date","to","name","id","thread","msg","time","from","Chats","useState","showChat","setShowChat","theThread","setTheThread","whoseChat","chat","_keyExtractor","item","_renderItem","GREY","STYLES","listTitle","length","Chat","currentTime","Date","setMsg","keyboardStatus","setKeyboardStatus","AMessage","style","statusIcon","status","messageTime","messageHeader","BLACK","icon","messageHeaderInner","messageReceiver","lastSeen","toLocaleDateString","toLocaleTimeString","contentContainerStyle","threadBody","map","threadItem","index","message","you","other","messageFooter","messageInput","messageInputControl","text","messageInputBtn","getHours","getMinutes","getSeconds","newThread","push","toDateString","error","console","log","WHITE","ACCENT_1","StyleSheet","create","wrapper","flex","backgroundColor","SECONDARY","header","borderColor","body","justifyContent","alignItems","padding","flexDirection","paddingLeft","fontWeight","fontSize","textAlign","color","shadowColor","shadowOffset","width","height","shadowOpacity","shadowRadius","elevation","marginBottom","borderRadius","paddingBottom","paddingRight","marginRight","messageInputEmoji","PRIMARY","margin","title","alert","marginTop","subtitle","label","leftHeader","centerHeader","yesText","rightHeader","marginLeft"],"mappings":"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","sourcesContent":["import * as React from \"react\";\nimport {\n  Text,\n  FlatList,\n  TouchableOpacity,\n  StyleSheet,\n  ScrollView,\n  View,\n} from \"react-native\";\nimport { TextInput } from \"react-native-gesture-handler\";\nimport Icon from \"react-native-vector-icons/Feather\";\nimport IconFont from \"react-native-vector-icons/FontAwesome\";\nimport { COLORS, DIMENS } from \"../constants/styles\";\nimport { colors, ListItem } from \"react-native-elements\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\n\nexport const MESSAGES = [\n  {\n    threadID: \"some-id-01-3443\",\n    date: \"date-started\",\n    to: {\n      name: \"David\",\n      id: \"userID\",\n    },\n    thread: [\n      {\n        id: \"msgid001\",\n        msg: \"Blurbs\",\n        date: \"Aug 25, 2021\",\n        time: \"10:13\",\n        from: \"you\",\n      },\n      {\n        id: \"msgid002\",\n        msg: \"Blurbs\",\n        date: \"Aug 25, 2021\",\n        time: \"10:15\",\n        from: \"David\",\n      },\n      {\n        id: \"msgid003\",\n        msg: \"Blurbs\",\n        date: \"Aug 25, 2021\",\n        time: \"10:20\",\n        from: \"you\",\n      },\n    ],\n  },\n  {\n    threadID: \"some-id-01-3444\",\n    date: \"date-started\",\n    to: {\n      name: \"Aaron\",\n      id: \"userID\",\n    },\n    thread: [\n      {\n        id: \"msgid001\",\n        msg: \"Blurbs\",\n        date: \"Aug 25, 2021\",\n        time: \"10:20\",\n        from: \"you\",\n      },\n      {\n        id: \"msgid002\",\n        msg: \"Blurbs\",\n        date: \"Aug 25, 2021\",\n        time: \"10:56\",\n        from: \"Aaron\",\n      },\n      {\n        id: \"msgid003\",\n        msg: \"Blurbs\",\n        date: \"Aug 25, 2021\",\n        time: \"11:06\",\n        from: \"you\",\n      },\n    ],\n  },\n  {\n    threadID: \"some-id-01-3445\",\n    date: \"date-started\",\n    to: {\n      name: \"Ibrahim\",\n      id: \"userID\",\n    },\n    thread: [\n      {\n        id: \"msgid001\",\n        msg: \"Blurbs\",\n        date: \"Aug 25, 2021\",\n        time: \"09:20\",\n        from: \"you\",\n      },\n      {\n        id: \"msgid002\",\n        msg: \"Blurbs\",\n        date: \"Aug 25, 2021\",\n        time: \"10:20\",\n        from: \"Ibrahim\",\n      },\n      {\n        id: \"msgid003\",\n        msg: \"Blurbs\",\n        date: \"Aug 25, 2021\",\n        time: \"11:20\",\n        from: \"you\",\n      },\n    ],\n  },\n];\n\nexport default function Chats() {\n  const [showChat, setShowChat] = React.useState(0);\n  const [theThread, setTheThread] = React.useState([]);\n\n  const whoseChat = (chat) => {\n    // console.log(chat)\n    setTheThread(chat);\n    setShowChat(1);\n  };\n\n  const _keyExtractor = (item) => item.threadID;\n\n  const _renderItem = ({ item }) => (\n    <TouchableOpacity onPress={() => whoseChat(item)}>\n      <ListItem bottomDivider>\n        <Icon name=\"circle\" color={COLORS.GREY} SIZE={25} />\n\n        <ListItem.Content>\n          <ListItem.Title style={STYLES.listTitle}>\n            {item.thread[item.thread.length - 1].msg}\n          </ListItem.Title>\n        </ListItem.Content>\n        <ListItem.Chevron size={30} />\n      </ListItem>\n    </TouchableOpacity>\n  );\n\n  const Chat = ({ showChat }) => {\n    let currentTime = new Date();\n    let [msg, setMsg] = React.useState(\"\");\n    let [keyboardStatus, setKeyboardStatus] = React.useState(false);\n    const AMessage = ({ thread, style }) => {\n      let statusIcon = <Icon name=\"clock\" />;\n      switch (thread?.status) {\n        case 0:\n          statusIcon = <Icon name=\"clock\" />;\n          break;\n        case 1:\n          statusIcon = <Icon name=\"check\" />;\n          break;\n        case 2:\n          statusIcon = <IconFont name=\"check-double\" />;\n          break;\n        case 3:\n          statusIcon = <IconFont name=\"check-double\" />;\n          break;\n        default:\n          statusIcon = <Icon name=\"clock\" />;\n          break;\n      }\n\n      return (\n        <View style={style}>\n          <Text>{thread.msg}</Text>\n          <View>\n            <Text style={STYLES.messageTime}>{thread.time}</Text>\n            {statusIcon}\n          </View>\n        </View>\n      );\n    };\n\n    return (\n      <>\n        <View style={STYLES.messageHeader}>\n          <TouchableOpacity onPress={() => showChat(0)}>\n            <Icon\n              name=\"arrow-left\"\n              size={30}\n              strokeSize={4}\n              color={COLORS.BLACK}\n            />\n          </TouchableOpacity>\n          <IconFont\n            name=\"user\"\n            size={30}\n            strokeSize={4}\n            style={STYLES.icon}\n            color={COLORS.BLACK}\n          />\n          <View style={STYLES.messageHeaderInner}>\n            <Text style={STYLES.messageReceiver}>{theThread.to.name}</Text>\n            <Text style={STYLES.lastSeen}>\n              Last seen {currentTime.toLocaleDateString()} at{\" \"}\n              {currentTime.toLocaleTimeString()}\n            </Text>\n          </View>\n        </View>\n        <ScrollView\n          contentContainerStyle={STYLES.contentContainerStyle}\n          style={STYLES.threadBody}\n          keyboardDismissMode=\"on-drag\"\n        >\n          {theThread.thread.map((threadItem, index) => (\n            <AMessage\n              style={[\n                STYLES.message,\n                threadItem.from == \"you\" ? STYLES.you : STYLES.other,\n              ]}\n              key={threadItem.id}\n              thread={threadItem}\n            />\n          ))}\n        </ScrollView>\n        <View style={STYLES.messageFooter}>\n          <View style={STYLES.messageInput}>\n            <TouchableOpacity>\n              <Icon\n                name=\"smile\"\n                size={30}\n                strokeSize={5}\n                color=\"rgba(0,0,0,.5)\"\n              />\n            </TouchableOpacity>\n            <TextInput\n              value={msg}\n              multiline={true}\n              numberOfLines={3}\n              style={STYLES.messageInputControl}\n              onChangeText={(text) => setMsg(text)}\n              placeholder={\"Type a message\"}\n              onFocus={() => setKeyboardStatus(true)}\n            />\n          </View>\n          {keyboardStatus ? (\n            <TouchableOpacity\n              style={STYLES.messageInputBtn}\n              onPress={async () => {\n                setMsg(\"\");\n                try {\n                  let date = new Date();\n                  let time = `${date.getHours()}:${date.getMinutes()}`;\n                  let id = `msgid${date.getHours()}${date.getMinutes()}${date.getSeconds()}`;\n                  let newThread = { ...theThread };\n                  newThread.thread.push({\n                    id,\n                    msg: msg,\n                    from: \"you\",\n                    time,\n                    date: date.toDateString(),\n                    status: 2,\n                  });\n                  setTheThread(newThread);\n                } catch (error) {\n                  console.log(error);\n                }\n              }}\n            >\n              <IconFont\n                name=\"paper-plane\"\n                size={25}\n                strokeSize={5}\n                color={COLORS.WHITE}\n                backgroundColor={COLORS.ACCENT_1}\n              />\n            </TouchableOpacity>\n          ) : (\n            <TouchableOpacity style={STYLES.messageInputBtn}>\n              <IconFont\n                name=\"microphone\"\n                size={25}\n                strokeSize={5}\n                color={COLORS.WHITE}\n                backgroundColor={COLORS.ACCENT_1}\n              />\n            </TouchableOpacity>\n          )}\n        </View>\n      </>\n    );\n  };\n\n  if (showChat) return <Chat showChat={setShowChat} />;\n\n  return (\n    <>\n      <FlatList\n        data={MESSAGES}\n        renderItem={_renderItem}\n        keyExtractor={_keyExtractor}\n      />\n    </>\n  );\n}\n\nconst STYLES = StyleSheet.create({\n  wrapper: {\n    flex: 1,\n    backgroundColor: COLORS.SECONDARY,\n  },\n  header: {\n    flex: 1,\n    borderColor: COLORS.ACCENT_1,\n  },\n  body: {\n    flex: 2,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n\n  messageHeader: {\n    padding: 10,\n    flexDirection: \"row\",\n    backgroundColor: COLORS.ACCENT_1,\n  },\n  messageHeaderInner: {\n    paddingLeft: 20,\n  },\n  messageReceiver: {\n    fontWeight: \"bold\",\n  },\n  lastSeen: {\n    fontSize: 9,\n  },\n  messageTime: {\n    textAlign: \"right\",\n    color: \"#064374\",\n  },\n  message: {\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 1,\n    },\n    shadowOpacity: 0.2,\n    shadowRadius: 0.5,\n    elevation: 1,\n    marginBottom: 8,\n    borderRadius: 8,\n    padding: 10,\n    paddingBottom: 5,\n  },\n  threadBody: {\n    flex: 2,\n    padding: 20,\n  },\n  contentContainerStyle: {\n    paddingBottom: 40,\n  },\n  messageInput: {\n    backgroundColor: COLORS.WHITE,\n    borderRadius: 50,\n    flexDirection: \"row\",\n    flex: 3,\n    alignItems: \"center\",\n    paddingLeft: 10,\n    paddingRight: 10,\n    marginRight: 10,\n  },\n  messageInputEmoji: {\n    flex: 1,\n  },\n  messageInputControl: {\n    flex: 2,\n    padding: 0,\n    paddingLeft: 5,\n    paddingRight: 5,\n  },\n  messageInputBtn: {\n    backgroundColor: COLORS.PRIMARY,\n    width: 50,\n    height: 50,\n    borderRadius: 100,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  messageFooter: {\n    flexDirection: \"row\",\n    alignItems: \"center\",\n    margin: 10,\n  },\n  title: {\n    fontWeight: \"bold\",\n    color: COLORS.SECONDARY,\n    textAlign: \"center\",\n  },\n  alert: {\n    color: COLORS.GREY,\n    textAlign: \"center\",\n    marginTop: 15,\n  },\n  listTitle: {\n    color: COLORS.BLACK,\n    fontSize: 16,\n    fontWeight: \"bold\",\n  },\n  subtitle: {\n    flexDirection: \"row\",\n  },\n  label: {\n    fontWeight: \"bold\",\n    marginRight: 5,\n  },\n  leftHeader: {\n    flex: 1,\n    paddingLeft: 10,\n  },\n  centerHeader: {\n    flex: 2,\n    flexDirection: \"row\",\n  },\n  yesText: {\n    color: COLORS.PRIMARY,\n  },\n  rightHeader: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\",\n  },\n  icon: {\n    marginLeft: 10,\n  },\n  you: {\n    backgroundColor: COLORS.WHITE,\n  },\n  other: {\n    backgroundColor: \"#C5E3FC\",\n  },\n});\n"]},"metadata":{},"sourceType":"module"}