{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport AuthContext from \"./contexts/auth\";\nimport { UserContext } from \"./providers/User\";\nimport forgotPassword from \"./screens/password.forgot\";\nimport PasswordReset from \"./screens/password.reset\";\nimport Login from \"./screens/login\";\nimport { DrawerNavigation, DrawerNavigationLogged } from \"./helpers/navigations\";\nimport { cyrb53, RETRIEVE_LOCAL_USERS, SAVE_LOCAL_USERS } from \"./helpers/functions\";\nimport Loader from \"./ui/loader\";\nimport { URLS } from \"./constants/API\";\nimport Diagnose from \"./screens/diagnosis\";\nimport Ambulances from \"./screens/ambulance\";\nimport Doctors from \"./screens/doctors\";\nimport ViewDiagnosis from \"./screens/diagnosis.view\";\nimport NewDiagnosis from \"./screens/diagnosis.new\";\nimport FollowUp from \"./screens/diagnosis.follow.up\";\nimport { initialStateAuth, reducerAuth } from \"./reducers/Auth\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\n\nvar Entry = function Entry() {\n  var userContext = React.useContext(UserContext);\n\n  var _React$useReducer = React.useReducer(reducerAuth, initialStateAuth),\n      _React$useReducer2 = _slicedToArray(_React$useReducer, 2),\n      state = _React$useReducer2[0],\n      dispatch = _React$useReducer2[1];\n\n  React.useEffect(function () {\n    var autoLogin = function autoLogin() {\n      var accessToken, tokenString, tokens;\n      return _regeneratorRuntime.async(function autoLogin$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              accessToken = null;\n              _context.prev = 1;\n              _context.next = 4;\n              return _regeneratorRuntime.awrap(AsyncStorage.getItem('tokens'));\n\n            case 4:\n              tokenString = _context.sent;\n              tokens = tokenString !== null && JSON.parse(tokenString);\n              accessToken = tokens.accessToken;\n              userContext.setAccessToken(accessToken);\n              dispatch({\n                type: 'RESTORE_TOKEN',\n                accessToken: accessToken\n              });\n              _context.next = 16;\n              break;\n\n            case 11:\n              _context.prev = 11;\n              _context.t0 = _context[\"catch\"](1);\n              console.log(_context.t0);\n              console.log('Restoring token failed');\n              console.log('acessToken ', accessToken);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[1, 11]], Promise);\n    };\n  }, []);\n  var memo = React.useMemo(function () {\n    return {\n      signIn: function signIn(data) {\n        var user, setLoading, username, password, theUsers, hash, aUser, response, json_data, result, _accessToken, refreshToken;\n\n        return _regeneratorRuntime.async(function signIn$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                user = data.user, setLoading = data.setLoading;\n\n                if (!(typeof user === undefined)) {\n                  _context2.next = 4;\n                  break;\n                }\n\n                Alert.alert('Error', 'Provide your phone number and password');\n                return _context2.abrupt(\"return\");\n\n              case 4:\n                username = user.username, password = user.password;\n\n                if (!(username == '' && password == '')) {\n                  _context2.next = 8;\n                  break;\n                }\n\n                Alert.alert('Error', 'Provide your phone number and password');\n                return _context2.abrupt(\"return\");\n\n              case 8:\n                theUsers = null;\n                _context2.prev = 9;\n                _context2.next = 12;\n                return _regeneratorRuntime.awrap(RETRIEVE_LOCAL_USERS());\n\n              case 12:\n                theUsers = _context2.sent;\n                theUsers = JSON.parse(theUsers);\n                _context2.next = 19;\n                break;\n\n              case 16:\n                _context2.prev = 16;\n                _context2.t0 = _context2[\"catch\"](9);\n                console.log(_context2.t0);\n\n              case 19:\n                if (!(theUsers !== null && theUsers.length > 0)) {\n                  _context2.next = 31;\n                  break;\n                }\n\n                hash = cyrb53(password);\n                aUser = theUsers.filter(function (theUser) {\n                  return theUser.username === username && theUser.hash === hash;\n                })[0];\n\n                if (!(aUser !== undefined && aUser.username === username)) {\n                  _context2.next = 27;\n                  break;\n                }\n\n                dispatch({\n                  type: 'SIGN_IN',\n                  accessToken: password\n                });\n                return _context2.abrupt(\"return\");\n\n              case 27:\n                Alert.alert('Failed to login', 'Try again, please!');\n                return _context2.abrupt(\"return\");\n\n              case 29:\n                _context2.next = 57;\n                break;\n\n              case 31:\n                _context2.prev = 31;\n                console.log('Starting network request');\n                _context2.next = 35;\n                return _regeneratorRuntime.awrap(fetch(URLS.BASE + \"/users/login\", {\n                  method: 'POST',\n                  body: JSON.stringify({\n                    username: username,\n                    password: password\n                  }),\n                  headers: {\n                    \"Content-type\": \"application/json; charset=UTF-8\",\n                    \"Accept\": \"application/json\"\n                  }\n                }));\n\n              case 35:\n                response = _context2.sent;\n                _context2.next = 38;\n                return _regeneratorRuntime.awrap(response.json());\n\n              case 38:\n                json_data = _context2.sent;\n                result = json_data.result, _accessToken = json_data.accessToken, refreshToken = json_data.refreshToken;\n\n                if (!(result == 'Success')) {\n                  _context2.next = 49;\n                  break;\n                }\n\n                _context2.next = 43;\n                return _regeneratorRuntime.awrap(SAVE_LOCAL_USERS(username, password));\n\n              case 43:\n                userContext.setAccessToken(_accessToken);\n                _context2.next = 46;\n                return _regeneratorRuntime.awrap(AsyncStorage.setItem('tokens', JSON.stringify({\n                  accessToken: _accessToken,\n                  refreshToken: refreshToken\n                })));\n\n              case 46:\n                dispatch({\n                  type: 'SIGN_IN',\n                  accessToken: _accessToken\n                });\n                _context2.next = 50;\n                break;\n\n              case 49:\n                Alert.alert('Failed to login', 'Check your login details');\n\n              case 50:\n                _context2.next = 57;\n                break;\n\n              case 52:\n                _context2.prev = 52;\n                _context2.t1 = _context2[\"catch\"](31);\n                (_context2.t1 == null ? void 0 : _context2.t1.message) == 'Network request failed' && Alert.alert('Oops!', 'Check your internet connection');\n                setLoading(false);\n                console.log(_context2.t1);\n\n              case 57:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, null, null, [[9, 16], [31, 52]], Promise);\n      },\n      signOut: function signOut() {\n        AsyncStorage.removeItem('tokens');\n        dispatch({\n          type: 'SIGN_OUT'\n        });\n      },\n      signUp: function signUp(data) {\n        var _data$errors, firstname, lastname, theemail, thephone, thepassword, thepassword2, firstName, lastName, phone, password, password2, email;\n\n        return _regeneratorRuntime.async(function signUp$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _data$errors = data.errors, firstname = _data$errors.firstname, lastname = _data$errors.lastname, theemail = _data$errors.theemail, thephone = _data$errors.thephone, thepassword = _data$errors.thepassword, thepassword2 = _data$errors.thepassword2;\n\n                if (!(firstname || lastname || theemail || thephone || thepassword || thepassword2)) {\n                  _context3.next = 4;\n                  break;\n                }\n\n                Alert.alert('Fail', 'Errors, Fix errors in the form, and try again!');\n                return _context3.abrupt(\"return\");\n\n              case 4:\n                firstName = data.firstName, lastName = data.lastName, phone = data.phone, password = data.password, password2 = data.password2, email = data.email;\n\n                if (!(firstName == '' || lastName == '' || phone.length < 12 || password == '' || password2 == '')) {\n                  _context3.next = 9;\n                  break;\n                }\n\n                Alert.alert('Fail', 'Fix errors in the form, and try again!');\n                console.log(firstName, lastName, phone, email, password, password2);\n                return _context3.abrupt(\"return\");\n\n              case 9:\n                userContext.setIsRegistering('yes');\n                _context3.prev = 10;\n                _context3.next = 13;\n                return _regeneratorRuntime.awrap(fetch(URLS.BASE + \"/register\", {\n                  method: 'POST',\n                  body: JSON.stringify({\n                    phone: phone,\n                    fname: firstName,\n                    lname: lastName,\n                    email: email,\n                    role_id: 2,\n                    password: password,\n                    password_confirmation: password2\n                  }),\n                  headers: {\n                    \"Content-type\": \"application/json; charset=UTF-8\",\n                    \"Accept\": \"application/json\"\n                  }\n                }).then(function (res) {\n                  return res.json();\n                }).then(function (response) {\n                  if (response.result == 'success') {\n                    try {\n                      userContext.setIsRegistering('complete');\n                    } catch (err) {\n                      console.error(err);\n                    }\n                  } else if (response.result == 'failure') {\n                    var _response$message = response.message,\n                        _email = _response$message.email,\n                        _phone = _response$message.phone;\n                    if (typeof _email != 'undefined') Alert.alert('Registration failed!', 'The email address you entered was used by another member.');else if (typeof _phone != 'undefined') Alert.alert('Registration failed!', 'The phone number you entered was used by another member.');else Alert.alert('Ooops!', 'Try again!');\n                    console.log(response);\n                  } else {\n                    Alert.alert('Ooops!', 'Try again!');\n                  }\n                }).catch(function (err) {\n                  console.log(err);\n                  Alert.alert('Failure', 'Something wrong happened. Check your internet and try again!');\n                }));\n\n              case 13:\n                _context3.next = 18;\n                break;\n\n              case 15:\n                _context3.prev = 15;\n                _context3.t0 = _context3[\"catch\"](10);\n                console.error(_context3.t0);\n\n              case 18:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, null, null, [[10, 15]], Promise);\n      }\n    };\n  }, []);\n  var isLoading = state.isLoading,\n      accessToken = state.accessToken;\n  return _jsx(AuthContext.Provider, {\n    value: {\n      'temp': true\n    },\n    children: _jsx(NavigationContainer, {\n      children: _jsxs(Stack.Navigator, {\n        children: [_jsx(Stack.Screen, {\n          name: \"Login\",\n          component: Login,\n          options: {\n            headerShown: false,\n            animationTypeForReplace: state.isSignout ? 'pop' : 'push'\n          }\n        }), \"if  ( // We haven't finished checking for the token yet\", _jsx(Stack.Screen, {\n          name: \"loader\",\n          component: Loader,\n          options: {\n            headerShown: false\n          }\n        }), \") : accessToken == null ? (\", _jsxs(_Fragment, {\n          children: [_jsx(Stack.Screen, {\n            name: \"DrawerNavigation\",\n            component: DrawerNavigation,\n            options: {\n              headerShown: false\n            }\n          }), _jsx(Stack.Screen, {\n            name: \"Login\",\n            component: Login,\n            options: {\n              headerShown: false,\n              animationTypeForReplace: state.isSignout ? 'pop' : 'push'\n            }\n          }), _jsx(Stack.Screen, {\n            name: \"forgotPassword\",\n            options: {\n              headerShown: false\n            },\n            component: forgotPassword\n          }), _jsx(Stack.Screen, {\n            name: \"resetPassword\",\n            options: {\n              headerShown: false\n            },\n            component: PasswordReset\n          })]\n        }), \") : (\", _jsxs(_Fragment, {\n          children: [_jsx(Stack.Screen, {\n            name: \"Dashboard\",\n            options: {\n              headerShown: false\n            },\n            component: DrawerNavigationLogged\n          }), _jsx(Stack.Screen, {\n            name: \"Doctors\",\n            options: {\n              headerShown: false\n            },\n            component: Doctors\n          }), _jsx(Stack.Screen, {\n            name: \"Ambulances\",\n            options: {\n              headerShown: false\n            },\n            component: Ambulances\n          }), _jsx(Stack.Screen, {\n            name: \"Diagnose\",\n            options: {\n              headerShown: false\n            },\n            component: Diagnose\n          }), _jsx(Stack.Screen, {\n            name: \"ViewDiagnosis\",\n            options: {\n              headerShown: false\n            },\n            component: ViewDiagnosis\n          }), _jsx(Stack.Screen, {\n            name: \"NewDiagnosis\",\n            options: {\n              headerShown: false\n            },\n            component: NewDiagnosis\n          }), _jsx(Stack.Screen, {\n            name: \"FollowUp\",\n            options: {\n              headerShown: false\n            },\n            component: FollowUp\n          })]\n        }), \") }\"]\n      })\n    })\n  });\n};\n\nexport default Entry;","map":{"version":3,"sources":["/Users/davidofug/Documents/Apps/mobile-apps/mobiklinic/components/entry.js"],"names":["React","NavigationContainer","createStackNavigator","AsyncStorage","AuthContext","UserContext","forgotPassword","PasswordReset","Login","DrawerNavigation","DrawerNavigationLogged","cyrb53","RETRIEVE_LOCAL_USERS","SAVE_LOCAL_USERS","Loader","URLS","Diagnose","Ambulances","Doctors","ViewDiagnosis","NewDiagnosis","FollowUp","initialStateAuth","reducerAuth","Stack","Entry","userContext","useContext","useReducer","state","dispatch","useEffect","autoLogin","accessToken","getItem","tokenString","tokens","JSON","parse","setAccessToken","type","console","log","memo","useMemo","signIn","data","user","setLoading","undefined","Alert","alert","username","password","theUsers","length","hash","aUser","filter","theUser","fetch","BASE","method","body","stringify","headers","response","json","json_data","result","refreshToken","setItem","message","signOut","removeItem","signUp","errors","firstname","lastname","theemail","thephone","thepassword","thepassword2","firstName","lastName","phone","password2","email","setIsRegistering","fname","lname","role_id","password_confirmation","then","res","err","error","catch","isLoading","headerShown","animationTypeForReplace","isSignout"],"mappings":"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","sourcesContent":["import * as React from 'react'\nimport { Alert } from 'react-native'\nimport { NavigationContainer } from '@react-navigation/native'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport AsyncStorage from '@react-native-async-storage/async-storage'\nimport AuthContext from './contexts/auth'\nimport { UserContext} from './providers/User'\nimport forgotPassword from './screens/password.forgot'\nimport PasswordReset from './screens/password.reset'\nimport Login from './screens/login'\nimport {\n  DrawerNavigation,\n  DrawerNavigationLogged\n} from './helpers/navigations'\nimport {\n  cyrb53,\n  RETRIEVE_LOCAL_USERS,\n  SAVE_LOCAL_USERS\n} from './helpers/functions'\nimport Loader from './ui/loader'\nimport { URLS } from './constants/API'\nimport Diagnose from './screens/diagnosis'\nimport Ambulances from './screens/ambulance'\nimport Doctors from './screens/doctors'\nimport ViewDiagnosis from './screens/diagnosis.view'\nimport NewDiagnosis from './screens/diagnosis.new'\nimport FollowUp from './screens/diagnosis.follow.up'\nimport { initialStateAuth, reducerAuth } from './reducers/Auth'\n\nconst Stack = createStackNavigator()\n\nconst Entry = () => {\n\n  const userContext = React.useContext(UserContext)\n  const [state, dispatch] = React.useReducer(reducerAuth, initialStateAuth)\n\n  React.useEffect(() => {\n    // SplashScreen.hide()\n    // Fetch the token from storage then navigate to our appropriate place\n    const autoLogin = async () => {\n\n      // AsyncStorage.clear()\n\n      let accessToken = null\n\n      try {\n        let tokenString = await AsyncStorage.getItem('tokens')\n\n        let tokens = tokenString !== null && JSON.parse( tokenString )\n        accessToken = tokens.accessToken\n\n        userContext.setAccessToken(accessToken)\n\n        dispatch({type: 'RESTORE_TOKEN',  accessToken})\n\n      } catch (e) {\n        // Restoring token failed\n        console.log(e)\n        console.log( 'Restoring token failed' )\n        console.log( 'acessToken ', accessToken )\n      }\n\n      // After restoring token, we may need to validate it in production apps\n\n      // This will switch to the App screen or Auth screen and this loading\n      // screen will be unmounted and thrown away.\n    }\n\n    // autoLogin()\n  }, [])\n\n  const memo = React.useMemo(() => ({\n    signIn: async data => {\n      let { user, setLoading } = data\n\n      // In a production app, we need to send some data (usually username, password) to server and get a token\n      // We will also need to handle errors if sign in failed\n      // After getting token, we need to persist the token using `AsyncStorage`\n      // In the example, we'll use a dummy token\n\n      if (typeof user === undefined) {\n        Alert.alert('Error', 'Provide your phone number and password')\n        return\n      }\n\n      const { username, password } = user\n\n      if (username == '' && password == '') {\n        Alert.alert('Error', 'Provide your phone number and password')\n        return\n      }\n\n      let theUsers = null\n\n      try {\n        theUsers = await RETRIEVE_LOCAL_USERS()\n        theUsers = JSON.parse(theUsers)\n\n      } catch (err) {\n        console.log(err)\n      }\n\n      if (theUsers !== null && theUsers.length > 0) {\n        let hash = cyrb53(password)\n        let aUser = theUsers.filter(theUser => theUser.username === username && theUser.hash === hash)[0]\n\n        if (aUser !== undefined && aUser.username === username) {\n          dispatch({ type: 'SIGN_IN', accessToken: password })\n          return\n        }\n        else {\n          Alert.alert('Failed to login', 'Try again, please!')\n          return\n        }\n      }\n      else {\n        try {\n          console.log('Starting network request')\n          let response = await fetch(`${URLS.BASE}/users/login`, {\n            method: 'POST',\n            body: JSON.stringify({\n              username: username,\n              password: password\n            }),\n            headers: {\n              \"Content-type\": \"application/json; charset=UTF-8\",\n              \"Accept\": \"application/json\",\n            }\n          })\n\n          let json_data = await response.json()\n          const { result, accessToken, refreshToken } = json_data\n\n          if (result == 'Success') {\n\n            await SAVE_LOCAL_USERS(username, password)\n\n            userContext.setAccessToken(accessToken)\n\n            await AsyncStorage.setItem('tokens', JSON.stringify({ accessToken, refreshToken }))\n\n            dispatch({ type: 'SIGN_IN', accessToken })\n\n          } else\n            Alert.alert('Failed to login', 'Check your login details')\n\n        }\n        catch (err)\n        {\n          (err?.message == 'Network request failed') && Alert.alert('Oops!','Check your internet connection')\n          setLoading(false)\n          console.log(err)\n        }\n        }\n      },\n      signOut: () => {\n        AsyncStorage.removeItem('tokens')\n        dispatch({ type: 'SIGN_OUT' })\n      },\n      signUp: async data => {\n        // In a production app, we need to send user data to server and get a token\n        // We will also need to handle errors if sign up failed\n        // After getting token, we need to persist the token using `AsyncStorage`\n        // In the example, we'll use a dummy token\n        const {firstname, lastname, theemail, thephone, thepassword, thepassword2} = data.errors\n\n        if(firstname || lastname || theemail || thephone || thepassword || thepassword2) {\n            Alert.alert('Fail','Errors, Fix errors in the form, and try again!')\n            return\n        }\n\n        const {firstName, lastName, phone, password, password2, email } = data\n\n        if(firstName == '' || lastName == '' || phone.length < 12 || password == '' || password2 == ''  ) {\n            Alert.alert('Fail','Fix errors in the form, and try again!')\n            console.log(firstName, lastName, phone, email, password, password2)\n            return\n        }\n\n        userContext.setIsRegistering('yes')\n\n        try{\n\n          await fetch(`${URLS.BASE}/register`, {\n                method: 'POST',\n                body: JSON.stringify({\n                    phone: phone,\n                    fname: firstName,\n                    lname: lastName,\n                    email: email,\n                    role_id: 2,\n                    password: password,\n                    password_confirmation: password2,\n                }),\n                headers: {\n                    \"Content-type\": \"application/json; charset=UTF-8\",\n                    \"Accept\": \"application/json\"\n                }\n            })\n            .then( res => res.json())\n            .then( response => {\n              if(response.result == 'success' ) {\n                try {\n                    userContext.setIsRegistering('complete')\n                  } catch(err) {\n                      console.error(err)\n                  }\n\n              } else if(response.result == 'failure') {\n\n                  const {email, phone} = response.message\n\n                  if(typeof email != 'undefined' )\n                    Alert.alert('Registration failed!', 'The email address you entered was used by another member.')\n\n                  else if(typeof phone != 'undefined')\n                    Alert.alert('Registration failed!', 'The phone number you entered was used by another member.')\n                  else\n                    Alert.alert('Ooops!', 'Try again!')\n\n                  console.log(response)\n\n              } else {\n                Alert.alert('Ooops!', 'Try again!')\n              }\n            })\n            .catch( err => {\n              console.log(err)\n              Alert.alert('Failure', 'Something wrong happened. Check your internet and try again!')\n            })\n\n        } catch(err) {\n            console.error(err)\n        }\n      },\n    }),[]\n  )\n  const {isLoading, accessToken} = state\n  return (\n    <AuthContext.Provider value={{'temp':true}}>\n        <NavigationContainer>\n        <Stack.Navigator>\n        <Stack.Screen name=\"Login\" component={Login} options={{\n                        headerShown: false,\n                        animationTypeForReplace: state.isSignout ? 'pop' : 'push',\n                        }} />\n              if  (\n                // We haven't finished checking for the token yet\n                <Stack.Screen name=\"loader\" component={Loader} options={{headerShown: false}} />\n                )\n                :\n                accessToken == null\n                ?\n                (\n                    <>\n                    <Stack.Screen name=\"DrawerNavigation\" component={DrawerNavigation} options={{headerShown: false}} />\n                    <Stack.Screen name=\"Login\" component={Login} options={{\n                        headerShown: false,\n                        animationTypeForReplace: state.isSignout ? 'pop' : 'push',\n                        }} />\n                    <Stack.Screen name=\"forgotPassword\" options={{ headerShown: false }} component={forgotPassword} />\n                    <Stack.Screen name=\"resetPassword\" options={{ headerShown: false }} component={PasswordReset} />\n                    </>\n                )\n                :\n                (\n                    <>\n                    <Stack.Screen name=\"Dashboard\" options={{ headerShown: false }} component={DrawerNavigationLogged} />\n                    <Stack.Screen name=\"Doctors\" options={{ headerShown: false }} component={Doctors} />\n                    <Stack.Screen name=\"Ambulances\" options={{ headerShown: false }} component={Ambulances} />\n                    <Stack.Screen name=\"Diagnose\" options={{ headerShown: false }} component={Diagnose} />\n                    <Stack.Screen name=\"ViewDiagnosis\" options={{ headerShown: false }} component={ViewDiagnosis} />\n                    <Stack.Screen name=\"NewDiagnosis\" options={{ headerShown: false }} component={NewDiagnosis} />\n                    <Stack.Screen name=\"FollowUp\" options={{ headerShown: false }} component={FollowUp} />\n                    </>\n                )\n                }\n            </Stack.Navigator>\n        </NavigationContainer>\n    </AuthContext.Provider>\n  )\n}\n\nexport default Entry"]},"metadata":{},"sourceType":"module"}