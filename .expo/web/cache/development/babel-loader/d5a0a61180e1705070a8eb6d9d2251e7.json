{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport * as React from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar DiagnosisContext = React.createContext();\n\nvar DiagnosisProvider = function DiagnosisProvider(_ref) {\n  var children = _ref.children;\n\n  var _React$useState = React.useState([]),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      followups = _React$useState2[0],\n      setFollowups = _React$useState2[1];\n\n  var _React$useState3 = React.useState({}),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      followup = _React$useState4[0],\n      setFollowup = _React$useState4[1];\n\n  var _React$useState5 = React.useState([]),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      diagnoses = _React$useState6[0],\n      setDiagnoses = _React$useState6[1];\n\n  var _React$useState7 = React.useState({}),\n      _React$useState8 = _slicedToArray(_React$useState7, 2),\n      diagnosis = _React$useState8[0],\n      setDiagnosis = _React$useState8[1];\n\n  var initial = React.useMemo(function () {\n    return {\n      handleFollowup: function handleFollowup() {},\n      handleFollowups: function handleFollowups() {},\n      handleDiagnoses: function handleDiagnoses(data) {\n        return _regeneratorRuntime.async(function handleDiagnoses$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      },\n      handleDiagnosis: function handleDiagnosis() {}\n    };\n  });\n  return _jsx(DiagnosisContext.Provider, {\n    value: {\n      diagnoses: diagnoses,\n      followups: followups,\n      setDiagnoses: setDiagnoses,\n      setFollowups: setFollowups\n    },\n    children: children\n  });\n};\n\nexport { DiagnosisContext, DiagnosisProvider };","map":{"version":3,"sources":["/Users/davidofug/Documents/Apps/mobile-apps/mobiklinic/components/providers/Diagnosis.js"],"names":["React","DiagnosisContext","createContext","DiagnosisProvider","children","useState","followups","setFollowups","followup","setFollowup","diagnoses","setDiagnoses","diagnosis","setDiagnosis","initial","useMemo","handleFollowup","handleFollowups","handleDiagnoses","data","handleDiagnosis"],"mappings":";;AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;;AAEA,IAAMC,gBAAgB,GAAGD,KAAK,CAACE,aAAN,EAAzB;;AAEA,IAAMC,iBAAiB,GAAG,SAApBA,iBAAoB,OAAgB;AAAA,MAAdC,QAAc,QAAdA,QAAc;;AAEtC,wBAAkCJ,KAAK,CAACK,QAAN,CAAe,EAAf,CAAlC;AAAA;AAAA,MAAOC,SAAP;AAAA,MAAkBC,YAAlB;;AACA,yBAAgCP,KAAK,CAACK,QAAN,CAAe,EAAf,CAAhC;AAAA;AAAA,MAAOG,QAAP;AAAA,MAAiBC,WAAjB;;AACA,yBAAkCT,KAAK,CAACK,QAAN,CAAe,EAAf,CAAlC;AAAA;AAAA,MAAOK,SAAP;AAAA,MAAkBC,YAAlB;;AACA,yBAAkCX,KAAK,CAACK,QAAN,CAAe,EAAf,CAAlC;AAAA;AAAA,MAAOO,SAAP;AAAA,MAAkBC,YAAlB;;AAGA,MAAMC,OAAO,GAAGd,KAAK,CAACe,OAAN,CAAc;AAAA,WAAO;AACjCC,MAAAA,cAAc,EAAE,0BAAM,CAAE,CADS;AAEjCC,MAAAA,eAAe,EAAE,2BAAM,CAAE,CAFQ;AAGjCC,MAAAA,eAAe,EAAE,yBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHgB;AAIjCC,MAAAA,eAAe,EAAE,2BAAM,CAAE;AAJQ,KAAP;AAAA,GAAd,CAAhB;AAOA,SACI,KAAC,gBAAD,CAAkB,QAAlB;AAA2B,IAAA,KAAK,EAAE;AAC9BV,MAAAA,SAAS,EAATA,SAD8B;AAE9BJ,MAAAA,SAAS,EAATA,SAF8B;AAG9BK,MAAAA,YAAY,EAAZA,YAH8B;AAI9BJ,MAAAA,YAAY,EAAZA;AAJ8B,KAAlC;AAAA,cAMKH;AANL,IADJ;AAUH,CAzBD;;AA2BA,SAAQH,gBAAR,EAA0BE,iBAA1B","sourcesContent":["import * as React from 'react'\n\nconst DiagnosisContext = React.createContext()\n\nconst DiagnosisProvider = ({children}) => {\n\n    const [followups, setFollowups] = React.useState([])\n    const [followup, setFollowup] = React.useState({})\n    const [diagnoses, setDiagnoses] = React.useState([])\n    const [diagnosis, setDiagnosis] = React.useState({})\n\n\n    const initial = React.useMemo(() => ({\n        handleFollowup: () => {},\n        handleFollowups: () => {},\n        handleDiagnoses: async data => {},\n        handleDiagnosis: () => {}\n    }))\n\n    return (\n        <DiagnosisContext.Provider value={{\n            diagnoses,\n            followups,\n            setDiagnoses,\n            setFollowups\n        }}>\n            {children}\n        </DiagnosisContext.Provider>\n    )\n}\n\nexport {DiagnosisContext, DiagnosisProvider}"]},"metadata":{},"sourceType":"module"}