{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport * as React from \"react\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Linking from \"react-native-web/dist/exports/Linking\";\nimport FlatList from \"react-native-web/dist/exports/FlatList\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\nimport { ListItem } from \"react-native-elements\";\nimport { CustomStatusBar } from \"../ui/custom.status.bar\";\nimport Icon from \"@expo/vector-icons/Feather\";\nimport { COLORS, DIMENS } from \"../constants/styles\";\nimport Login from \"./login\";\nimport AuthContext from \"../contexts/auth\";\nimport { DoctorsContext } from \"../providers/Doctors\";\nimport { UserContext } from \"../providers/User\";\nimport { tokensRefresh } from \"../helpers/functions\";\nimport CustomHeader from \"../ui/custom-header\";\nimport Loader from \"../ui/loader\";\nimport { URLS } from \"../constants/API\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar Doctors = function Doctors(_ref) {\n  var navigation = _ref.navigation;\n\n  var _React$useState = React.useState({\n    isLoading: true,\n    login: false\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      state = _React$useState2[0],\n      setState = _React$useState2[1];\n\n  var _React$useContext = React.useContext(AuthContext),\n      signOut = _React$useContext.signOut;\n\n  var doctorsContext = React.useContext(DoctorsContext);\n  var userContext = React.useContext(UserContext);\n  React.useEffect(function () {\n    _getDoctors();\n  }, [state.doctors]);\n\n  var _getDoctors = function _getDoctors() {\n    var tokenString, tokens, accessToken, response, JSON_RESPONSE, _await$JSON_RESPONSE, result, msg, _doctors, _result;\n\n    return _regeneratorRuntime.async(function _getDoctors$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(AsyncStorage.getItem(\"tokens\"));\n\n          case 3:\n            tokenString = _context.sent;\n            _context.t0 = tokenString;\n\n            if (!_context.t0) {\n              _context.next = 9;\n              break;\n            }\n\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(JSON.parse(tokenString));\n\n          case 8:\n            _context.t0 = _context.sent;\n\n          case 9:\n            tokens = _context.t0;\n            accessToken = tokens.accessToken;\n\n            if (!accessToken) {\n              _context.next = 42;\n              break;\n            }\n\n            _context.next = 14;\n            return _regeneratorRuntime.awrap(fetch(URLS.BASE + \"/doctors\", {\n              method: \"GET\",\n              headers: {\n                Authorization: \"Bearer \" + accessToken,\n                \"Content-type\": \"application/json; charset=UTF-8\",\n                Accept: \"application/json\"\n              }\n            }));\n\n          case 14:\n            response = _context.sent;\n            _context.next = 17;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 17:\n            JSON_RESPONSE = _context.sent;\n            _context.next = 20;\n            return _regeneratorRuntime.awrap(JSON_RESPONSE);\n\n          case 20:\n            _await$JSON_RESPONSE = _context.sent;\n            result = _await$JSON_RESPONSE.result;\n            msg = _await$JSON_RESPONSE.msg;\n            _doctors = _await$JSON_RESPONSE.doctors;\n\n            if (!(result == \"Success\")) {\n              _context.next = 28;\n              break;\n            }\n\n            doctorsContext.setDoctors(_objectSpread(_objectSpread({}, state), {}, {\n              doctors: _doctors\n            }));\n            setState(_objectSpread(_objectSpread({}, state), {}, {\n              doctors: _doctors,\n              isLoading: false\n            }));\n            return _context.abrupt(\"return\");\n\n          case 28:\n            if (!(result == \"Failure\")) {\n              _context.next = 42;\n              break;\n            }\n\n            if (!(msg == \"Token expired\")) {\n              _context.next = 36;\n              break;\n            }\n\n            _result = tokensRefresh();\n\n            if (!_result.accessToken) {\n              _context.next = 35;\n              break;\n            }\n\n            _context.next = 34;\n            return _regeneratorRuntime.awrap(AsyncStorage.setItem(\"tokens\", JSON.stringify({\n              accessToken: _result.accessToken,\n              refreshToken: _result.refreshToken\n            })));\n\n          case 34:\n            _getDoctors();\n\n          case 35:\n            return _context.abrupt(\"return\");\n\n          case 36:\n            if (!(msg == \"Invalid Access Token\")) {\n              _context.next = 40;\n              break;\n            }\n\n            signOut();\n            setState(_objectSpread(_objectSpread({}, state), {}, {\n              login: true\n            }));\n            return _context.abrupt(\"return\");\n\n          case 40:\n            console.log(\"Some errors\");\n            console.log(JSON_RESPONSE);\n\n          case 42:\n            _context.next = 48;\n            break;\n\n          case 44:\n            _context.prev = 44;\n            _context.t1 = _context[\"catch\"](0);\n            Alert.alert(\"Ooops!\", \"Something went wrong. Try again!\", [{\n              text: \"OK\"\n            }]);\n            console.log(_context.t1);\n\n          case 48:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, [[0, 44]], Promise);\n  };\n\n  var _keyExtractor = function _keyExtractor(item) {\n    return item._id;\n  };\n\n  var _renderItem = function _renderItem(_ref2) {\n    var item = _ref2.item;\n    return _jsx(TouchableOpacity, {\n      onPress: function onPress() {\n        return Linking.openURL(\"tel:\" + item.phone);\n      },\n      children: _jsxs(ListItem, {\n        bottomDivider: true,\n        children: [_jsx(Icon, {\n          name: \"circle\",\n          size: 25,\n          color: item.status == 1 ? \"green\" : item.status == 2 ? COLORS.PRIMARY : \"#f00\"\n        }), _jsxs(ListItem.Content, {\n          children: [_jsx(ListItem.Title, {\n            style: STYLES.listTitle,\n            children: item.name\n          }), _jsx(ListItem.Subtitle, {\n            style: STYLES.subtitle,\n            children: _jsxs(View, {\n              style: STYLES.wrapper,\n              children: [_jsxs(View, {\n                style: STYLES.subtitle,\n                children: [_jsx(Text, {\n                  style: STYLES.label,\n                  children: \"Specilisation\"\n                }), _jsx(Text, {\n                  children: item.specialisation\n                })]\n              }), _jsxs(View, {\n                style: STYLES.subtitle,\n                children: [_jsx(Text, {\n                  style: STYLES.label,\n                  children: \"Hospital\"\n                }), _jsx(Text, {\n                  children: item.hospital\n                })]\n              }), _jsxs(View, {\n                style: STYLES.subtitle,\n                children: [_jsx(Text, {\n                  style: STYLES.label,\n                  children: \"District\"\n                }), _jsx(Text, {\n                  children: item.district\n                })]\n              }), _jsxs(View, {\n                style: STYLES.subtitle,\n                children: [_jsx(Text, {\n                  style: STYLES.label,\n                  children: \"Languages\"\n                }), _jsx(Text, {\n                  children: item.languages\n                })]\n              })]\n            })\n          })]\n        }), _jsx(Icon, {\n          name: \"phone\",\n          size: 25,\n          color: \"rgba(0,0,0,.3)\"\n        })]\n      })\n    });\n  };\n\n  var _header = function _header() {\n    return _jsx(CustomHeader, {\n      left: _jsx(TouchableOpacity, {\n        style: {\n          paddingLeft: 10\n        },\n        onPress: function onPress() {\n          return navigation.openDrawer();\n        },\n        children: _jsx(Icon, {\n          name: \"menu\",\n          size: 25,\n          color: COLORS.SECONDARY\n        })\n      }),\n      title: _jsx(Text, {\n        style: [STYLES.centerHeader, STYLES.title],\n        children: \"Medical Experts\"\n      })\n    });\n  };\n\n  var doctors = state.doctors,\n      isLoading = state.isLoading,\n      login = state.login;\n  if (login) return _jsx(Login, {});\n  if (isLoading) return _jsx(Loader, {});\n  if (typeof doctors === \"object\" && doctors.length == 0) return _jsxs(View, {\n    style: STYLES.container,\n    children: [_jsx(CustomHeader, {\n      navigation: navigation,\n      title: \"Doctors\"\n    }), _jsxs(View, {\n      children: [_jsx(CustomStatusBar, {}), _jsx(Text, {\n        style: STYLES.textColor,\n        children: \"Can't find Doctors to show.\"\n      })]\n    })]\n  });\n  return _jsxs(View, {\n    style: STYLES.wrapper,\n    children: [_jsx(CustomStatusBar, {}), _header(), _jsx(FlatList, {\n      data: doctors,\n      renderItem: _renderItem,\n      keyExtractor: _keyExtractor\n    })]\n  });\n};\n\nvar STYLES = StyleSheet.create({\n  wrapper: {\n    flex: 1,\n    backgroundColor: COLORS.SECONDARY\n  },\n  header: {\n    flex: 1\n  },\n  body: {\n    flex: 2,\n    justifyContent: \"center\",\n    alignItems: \"center\"\n  },\n  title: {\n    fontWeight: \"bold\",\n    color: COLORS.SECONDARY,\n    textAlign: \"center\"\n  },\n  alert: {\n    color: COLORS.GREY,\n    textAlign: \"center\",\n    marginTop: 15\n  },\n  listTitle: {\n    fontSize: 16,\n    fontWeight: \"bold\"\n  },\n  subtitle: {\n    flexDirection: \"row\",\n    fontSize: 10,\n    opacity: 0.5\n  },\n  label: {\n    fontWeight: \"bold\",\n    marginRight: 5\n  },\n  leftHeader: {\n    flex: 1,\n    paddingLeft: 10\n  },\n  centerHeader: {\n    flex: 2,\n    flexDirection: \"row\"\n  },\n  rightHeader: {\n    flex: 1,\n    flexDirection: \"row\",\n    justifyContent: \"flex-end\"\n  }\n});\nexport default Doctors;","map":{"version":3,"sources":["/Users/davidofug/Documents/Apps/mobile-apps/mobiklinic/components/screens/doctors.js"],"names":["React","AsyncStorage","ListItem","CustomStatusBar","Icon","COLORS","DIMENS","Login","AuthContext","DoctorsContext","UserContext","tokensRefresh","CustomHeader","Loader","URLS","Doctors","navigation","useState","isLoading","login","state","setState","useContext","signOut","doctorsContext","userContext","useEffect","_getDoctors","doctors","getItem","tokenString","JSON","parse","tokens","accessToken","fetch","BASE","method","headers","Authorization","Accept","response","json","JSON_RESPONSE","result","msg","setDoctors","setItem","stringify","refreshToken","console","log","Alert","alert","text","_keyExtractor","item","_id","_renderItem","Linking","openURL","phone","status","PRIMARY","STYLES","listTitle","name","subtitle","wrapper","label","specialisation","hospital","district","languages","_header","paddingLeft","openDrawer","SECONDARY","centerHeader","title","length","container","textColor","StyleSheet","create","flex","backgroundColor","header","body","justifyContent","alignItems","fontWeight","color","textAlign","GREY","marginTop","fontSize","flexDirection","opacity","marginRight","leftHeader","rightHeader"],"mappings":"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","sourcesContent":["import * as React from \"react\";\r\nimport {\r\n  Alert,\r\n  View,\r\n  Linking,\r\n  FlatList,\r\n  TouchableOpacity,\r\n  Text,\r\n  StyleSheet,\r\n  StatusBar,\r\n} from \"react-native\";\r\nimport AsyncStorage from \"@react-native-async-storage/async-storage\";\r\n\r\nimport { ListItem } from \"react-native-elements\";\r\nimport { CustomStatusBar } from \"../ui/custom.status.bar\";\r\nimport Icon from \"react-native-vector-icons/Feather\";\r\nimport { COLORS, DIMENS } from \"../constants/styles\";\r\n\r\nimport Login from \"./login\";\r\nimport AuthContext from \"../contexts/auth\";\r\nimport { DoctorsContext } from \"../providers/Doctors\";\r\nimport { UserContext } from \"../providers/User\";\r\nimport { tokensRefresh } from \"../helpers/functions\";\r\nimport CustomHeader from \"../ui/custom-header\";\r\nimport Loader from \"../ui/loader\";\r\nimport { URLS } from \"../constants/API\";\r\n\r\nconst Doctors = ({ navigation }) => {\r\n  const [state, setState] = React.useState({ isLoading: true, login: false });\r\n\r\n  const { signOut } = React.useContext(AuthContext);\r\n\r\n  const doctorsContext = React.useContext(DoctorsContext);\r\n\r\n  const userContext = React.useContext(UserContext);\r\n\r\n  React.useEffect(() => {\r\n    _getDoctors();\r\n  }, [state.doctors]);\r\n\r\n  const _getDoctors = async () => {\r\n    try {\r\n      const tokenString = await AsyncStorage.getItem(\"tokens\");\r\n      const tokens = tokenString && (await JSON.parse(tokenString));\r\n      const { accessToken } = tokens;\r\n\r\n      if (accessToken) {\r\n        const response = await fetch(`${URLS.BASE}/doctors`, {\r\n          method: \"GET\",\r\n          headers: {\r\n            Authorization: \"Bearer \" + accessToken,\r\n            \"Content-type\": \"application/json; charset=UTF-8\",\r\n            Accept: \"application/json\",\r\n          },\r\n        });\r\n\r\n        const JSON_RESPONSE = await response.json();\r\n\r\n        const { result, msg, doctors } = await JSON_RESPONSE;\r\n\r\n        if (result == \"Success\") {\r\n          doctorsContext.setDoctors({ ...state, doctors });\r\n          setState({ ...state, doctors, isLoading: false });\r\n          return;\r\n        }\r\n\r\n        if (result == \"Failure\") {\r\n          if (msg == \"Token expired\") {\r\n            const result = tokensRefresh();\r\n            if (result.accessToken) {\r\n              // userContext.setAccessToken(result.accessToken)\r\n              await AsyncStorage.setItem(\r\n                \"tokens\",\r\n                JSON.stringify({\r\n                  accessToken: result.accessToken,\r\n                  refreshToken: result.refreshToken,\r\n                })\r\n              );\r\n              _getDoctors();\r\n            }\r\n            return;\r\n          }\r\n\r\n          if (msg == \"Invalid Access Token\") {\r\n            signOut();\r\n            setState({ ...state, login: true });\r\n            return;\r\n          }\r\n\r\n          console.log(\"Some errors\");\r\n          console.log(JSON_RESPONSE);\r\n        }\r\n      }\r\n    } catch (e) {\r\n      Alert.alert(`Ooops!`, `Something went wrong. Try again!`, [\r\n        { text: \"OK\" },\r\n      ]);\r\n\r\n      console.log(e);\r\n    }\r\n  };\r\n\r\n  const _keyExtractor = (item) => item._id;\r\n\r\n  const _renderItem = ({ item }) => {\r\n    return (\r\n      <TouchableOpacity onPress={() => Linking.openURL(`tel:${item.phone}`)}>\r\n        <ListItem bottomDivider>\r\n          <Icon\r\n            name=\"circle\"\r\n            size={25}\r\n            color={\r\n              item.status == 1\r\n                ? \"green\"\r\n                : item.status == 2\r\n                ? COLORS.PRIMARY\r\n                : \"#f00\"\r\n            }\r\n          />\r\n          <ListItem.Content>\r\n            <ListItem.Title style={STYLES.listTitle}>\r\n              {item.name}\r\n            </ListItem.Title>\r\n            <ListItem.Subtitle style={STYLES.subtitle}>\r\n              <View style={STYLES.wrapper}>\r\n                <View style={STYLES.subtitle}>\r\n                  <Text style={STYLES.label}>Specilisation</Text>\r\n                  <Text>{item.specialisation}</Text>\r\n                </View>\r\n                <View style={STYLES.subtitle}>\r\n                  <Text style={STYLES.label}>Hospital</Text>\r\n                  <Text>{item.hospital}</Text>\r\n                </View>\r\n                <View style={STYLES.subtitle}>\r\n                  <Text style={STYLES.label}>District</Text>\r\n                  <Text>{item.district}</Text>\r\n                </View>\r\n                <View style={STYLES.subtitle}>\r\n                  <Text style={STYLES.label}>Languages</Text>\r\n                  <Text>{item.languages}</Text>\r\n                </View>\r\n              </View>\r\n            </ListItem.Subtitle>\r\n          </ListItem.Content>\r\n          <Icon name=\"phone\" size={25} color=\"rgba(0,0,0,.3)\" />\r\n        </ListItem>\r\n      </TouchableOpacity>\r\n    );\r\n  };\r\n  const _header = () => (\r\n    <CustomHeader\r\n      left={\r\n        <TouchableOpacity\r\n          style={{ paddingLeft: 10 }}\r\n          onPress={() => navigation.openDrawer()}\r\n        >\r\n          <Icon name=\"menu\" size={25} color={COLORS.SECONDARY} />\r\n        </TouchableOpacity>\r\n      }\r\n      title={\r\n        <Text style={[STYLES.centerHeader, STYLES.title]}>Medical Experts</Text>\r\n      }\r\n    />\r\n  );\r\n\r\n  let { doctors, isLoading, login } = state;\r\n\r\n  if (login) return <Login />;\r\n\r\n  if (isLoading) return <Loader />;\r\n\r\n  if (typeof doctors === \"object\" && doctors.length == 0)\r\n    return (\r\n      <View style={STYLES.container}>\r\n        <CustomHeader navigation={navigation} title={\"Doctors\"} />\r\n        <View>\r\n          <CustomStatusBar />\r\n          <Text style={STYLES.textColor}>Can't find Doctors to show.</Text>\r\n        </View>\r\n      </View>\r\n    );\r\n\r\n  return (\r\n    <View style={STYLES.wrapper}>\r\n      <CustomStatusBar />\r\n\r\n      {_header()}\r\n\r\n      <FlatList\r\n        data={doctors}\r\n        renderItem={_renderItem}\r\n        keyExtractor={_keyExtractor}\r\n      />\r\n    </View>\r\n  );\r\n};\r\n\r\nconst STYLES = StyleSheet.create({\r\n  wrapper: {\r\n    flex: 1,\r\n    backgroundColor: COLORS.SECONDARY,\r\n  },\r\n  header: {\r\n    flex: 1,\r\n  },\r\n  body: {\r\n    flex: 2,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  title: {\r\n    fontWeight: \"bold\",\r\n    color: COLORS.SECONDARY,\r\n    textAlign: \"center\",\r\n  },\r\n  alert: {\r\n    color: COLORS.GREY,\r\n    textAlign: \"center\",\r\n    marginTop: 15,\r\n  },\r\n  listTitle: {\r\n    fontSize: 16,\r\n    fontWeight: \"bold\",\r\n  },\r\n  subtitle: {\r\n    flexDirection: \"row\",\r\n    fontSize: 10,\r\n    opacity: 0.5,\r\n  },\r\n  label: {\r\n    fontWeight: \"bold\",\r\n    marginRight: 5,\r\n  },\r\n  leftHeader: {\r\n    flex: 1,\r\n    paddingLeft: 10,\r\n  },\r\n  centerHeader: {\r\n    flex: 2,\r\n    flexDirection: \"row\",\r\n  },\r\n  rightHeader: {\r\n    flex: 1,\r\n    flexDirection: \"row\",\r\n    justifyContent: \"flex-end\",\r\n  },\r\n});\r\n\r\nexport default Doctors;\r\n"]},"metadata":{},"sourceType":"module"}